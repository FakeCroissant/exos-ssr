* 1. Introduction
- representation matters
  - case analysis, computation
  - even simple symbolic representations useful:
    e.g. truth tables for booleans
- 3 kinds of steps:
  - deduction (top-down/forwards or bottom-up/backwards)
    + an important instance: reflection
      - switches between logical and symbolic representation
  - bookkeeping
    + introduce, rename, discharge, split cases
  - rewriting
    + passing unknown parameters, equational reasoning,
      switching representations
- in "ssr style" these three kinds of steps are interleaved
  and appear in roughly equal amounts
- basic Coq not well suited for ssr proofs:
  - biased towards backwards steps
    + little support for fwd steps or proof layout (bullets)
  - basic tactics implement fragile context manipulation heuristics
    which hinder precise bookkeeping
  - intro patterns generally under-utilized
- ssr features:
  + small-scale reflection itself
  + term selection
  + enhanced rewriting
  + robustness of scripts
- sections 2-3 on ssr itself
- section 4-5 on libraries (mathematical components)
  + design patterns (objects and theories on objects)
  + type classes, canonical structures
  + here focused on finite objects

* 3. Proof Script language
** Bookkeeping
- intros: move=> x H
- discharge ("generalize dependent"): move: x H
- case, elim, apply redefined to work only on goal
  + use ":" to make them work on variable in context: elim: n
  + elim is really like induction
- induction on compound thing: elim: (expr)
- branching version of => [..|..] allows to name things in subgoals
- renaming n into m: move: n => m
** Terminator exercises
- simpl doesn't work at all so can't see why various things unify
  + most ssr functions (addn, subn, etc) are opaque on purpose
    so they don't reduce unless explicitly unfolded
  + in fact it's even worse; even if you were to explicitly unfold
    them and compute with them, you would very often get expressions
    mentioning again unfolded operators, which don't unify with
    non-unfolded ones
- notation gets a bit in the way
  + or maybe just some time to get used to
  + the precedence of .+1 is a mystery, probably binds very tight 
- not all ingredients needed for solving the exercises were introduced
  in advance
  + assuming some familiarity with this style of proofs, all-powerful
    lemmas from the libraries, etc. -- completely lost without that
** Goal Selectors
- Q: any way to ensure that a tactic produces exactly n subgoals and
  to fail otherwise [||||..]?
  + without this all this goal selection stuff seems *super* fragile
** Forward chaining
- assert: have: P
  + where : here is not the discharge ":"
- pose: have := proof term
- wildcard mechanism / magic
  + single universally quantified variable only
- revert have: suff
- without loss of generality: wlog
  + seems useful for exploiting symmetries in math proofs
  + not sure it would apply to symmetries in PL proofs
** Omitted from tutorial
TODO: all useful stuff; should still check it out at some point
- subterm selection
- enhanced rewrite tactic 
- more complex intro and discharge patterns
** More complaints
- they prove entire lemmas in tactics without showing one single proof
  goal; so it's basically impossible to understand the proof without
  animating it
  + quo_rem_unicity, edivnP
- stuff like // and //= is super fragile!
  + how does one know how many goals there are
- this seems tailored at making all proof steps as explicit as possible
  + as opposed to automating as much as possible for instance
  + could it be that in math proofs there are more interesting steps
    than in PL proofs?
** Idea
- how about a tactic language in which each non-trivial goal split is
  explicitly marked with it's arity?
** General induction
- very interesting
- not defining strong induction principles, because there are too
  many possible ones
- instead using elim + generalization patterns + occurrence selection
  + I don't know *any* of these things, what are they talking about?
** Question
- How to clear hypotheses that are no longer useful?
** Lemma ltn_xor_geq and Exercise tuto_ltngtP
- This seems like a common pattern in SSReflect
  + not sure how it's called, but Maxime was also using it
